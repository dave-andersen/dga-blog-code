//
// sha512_all.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#ifndef ISPC_SHA512_ALL_H
#define ISPC_SHA512_ALL_H

#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void add_big_set_to_filter(uint64_t * buckets, uint32_t * collisionIndices, uint32_t n);
    extern void add_set_to_filter(uint64_t * buckets, uint32_t * collisionIndices, uint32_t n);
    extern void add_set_to_filter_shift19(uint64_t * buckets, uint32_t * collisionIndices, uint32_t n);
    extern uint32_t compact_big_set_from_filter(uint64_t * buckets, uint32_t * collisionIndices);
    extern void put_32_in_buckets(uint64_t * shacache, uint64_t * hashMap, uint32_t * hash_counts, uint32_t nonce_start);
    extern void sha512_ispc(uint64_t * data, uint64_t * buf, int32_t base);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus

#endif // ISPC_SHA512_ALL_H
